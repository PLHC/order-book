// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/MarketAccess.proto
#ifndef GRPC_proto_2fMarketAccess_2eproto__INCLUDED
#define GRPC_proto_2fMarketAccess_2eproto__INCLUDED

#include "proto/MarketAccess.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace marketAccess {

class Communication final {
 public:
  static constexpr char const* service_full_name() {
    return "marketAccess.Communication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Display(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::marketAccess::OrderBookContent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>> AsyncDisplay(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>>(AsyncDisplayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>> PrepareAsyncDisplay(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>>(PrepareAsyncDisplayRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::marketAccess::DeletionConfirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::DeletionConfirmation>> AsyncDelete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::DeletionConfirmation>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::DeletionConfirmation>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::DeletionConfirmation>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Insertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::marketAccess::InsertionConfirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::InsertionConfirmation>> AsyncInsertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::InsertionConfirmation>>(AsyncInsertionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::InsertionConfirmation>> PrepareAsyncInsertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::InsertionConfirmation>>(PrepareAsyncInsertionRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::marketAccess::UpdateConfirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::UpdateConfirmation>> AsyncUpdate(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::UpdateConfirmation>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::UpdateConfirmation>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::UpdateConfirmation>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Display(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Display(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::DeletionConfirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::DeletionConfirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Insertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::InsertionConfirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Insertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::InsertionConfirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::UpdateConfirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::UpdateConfirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>* AsyncDisplayRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>* PrepareAsyncDisplayRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::DeletionConfirmation>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::DeletionConfirmation>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::InsertionConfirmation>* AsyncInsertionRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::InsertionConfirmation>* PrepareAsyncInsertionRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::UpdateConfirmation>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::UpdateConfirmation>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Display(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::marketAccess::OrderBookContent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>> AsyncDisplay(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>>(AsyncDisplayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>> PrepareAsyncDisplay(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>>(PrepareAsyncDisplayRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::marketAccess::DeletionConfirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::DeletionConfirmation>> AsyncDelete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::DeletionConfirmation>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::DeletionConfirmation>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::DeletionConfirmation>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Insertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::marketAccess::InsertionConfirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::InsertionConfirmation>> AsyncInsertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::InsertionConfirmation>>(AsyncInsertionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::InsertionConfirmation>> PrepareAsyncInsertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::InsertionConfirmation>>(PrepareAsyncInsertionRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::marketAccess::UpdateConfirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::UpdateConfirmation>> AsyncUpdate(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::UpdateConfirmation>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::UpdateConfirmation>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::UpdateConfirmation>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Display(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, std::function<void(::grpc::Status)>) override;
      void Display(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::DeletionConfirmation* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::DeletionConfirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Insertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::InsertionConfirmation* response, std::function<void(::grpc::Status)>) override;
      void Insertion(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::InsertionConfirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::UpdateConfirmation* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::UpdateConfirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>* AsyncDisplayRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>* PrepareAsyncDisplayRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::DeletionConfirmation>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::DeletionConfirmation>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::InsertionConfirmation>* AsyncInsertionRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::InsertionConfirmation>* PrepareAsyncInsertionRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::UpdateConfirmation>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::UpdateConfirmation>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Display_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Insertion_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Display(::grpc::ServerContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::DeletionConfirmation* response);
    virtual ::grpc::Status Insertion(::grpc::ServerContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::InsertionConfirmation* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::UpdateConfirmation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Display() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisplay(::grpc::ServerContext* context, ::marketAccess::DisplayParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::OrderBookContent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::marketAccess::DeletionParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::DeletionConfirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Insertion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Insertion() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Insertion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insertion(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertion(::grpc::ServerContext* context, ::marketAccess::InsertionParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::InsertionConfirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::marketAccess::UpdateParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::UpdateConfirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Display<WithAsyncMethod_Delete<WithAsyncMethod_Insertion<WithAsyncMethod_Update<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Display() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response) { return this->Display(context, request, response); }));}
    void SetMessageAllocatorFor_Display(
        ::grpc::MessageAllocator< ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Display(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::DeletionParameters, ::marketAccess::DeletionConfirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::DeletionConfirmation* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::marketAccess::DeletionParameters, ::marketAccess::DeletionConfirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::DeletionParameters, ::marketAccess::DeletionConfirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Insertion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Insertion() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::InsertionParameters, ::marketAccess::InsertionConfirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::InsertionConfirmation* response) { return this->Insertion(context, request, response); }));}
    void SetMessageAllocatorFor_Insertion(
        ::grpc::MessageAllocator< ::marketAccess::InsertionParameters, ::marketAccess::InsertionConfirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::InsertionParameters, ::marketAccess::InsertionConfirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Insertion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insertion(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Insertion(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::UpdateParameters, ::marketAccess::UpdateConfirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::UpdateConfirmation* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::marketAccess::UpdateParameters, ::marketAccess::UpdateConfirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::UpdateParameters, ::marketAccess::UpdateConfirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Display<WithCallbackMethod_Delete<WithCallbackMethod_Insertion<WithCallbackMethod_Update<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Display() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Insertion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Insertion() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Insertion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insertion(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Display() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisplay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Insertion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Insertion() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Insertion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insertion(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Display() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Display(context, request, response); }));
    }
    ~WithRawCallbackMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Display(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Display(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Insertion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Insertion() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Insertion(context, request, response); }));
    }
    ~WithRawCallbackMethod_Insertion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insertion(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Insertion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Display : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Display() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>* streamer) {
                       return this->StreamedDisplay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Display() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Display(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisplay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::DisplayParameters,::marketAccess::OrderBookContent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::DeletionParameters, ::marketAccess::DeletionConfirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::DeletionParameters, ::marketAccess::DeletionConfirmation>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::DeletionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::DeletionParameters,::marketAccess::DeletionConfirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Insertion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Insertion() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::InsertionParameters, ::marketAccess::InsertionConfirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::InsertionParameters, ::marketAccess::InsertionConfirmation>* streamer) {
                       return this->StreamedInsertion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Insertion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Insertion(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::InsertionConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::InsertionParameters,::marketAccess::InsertionConfirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::UpdateParameters, ::marketAccess::UpdateConfirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::UpdateParameters, ::marketAccess::UpdateConfirmation>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::UpdateConfirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::UpdateParameters,::marketAccess::UpdateConfirmation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Display<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Insertion<WithStreamedUnaryMethod_Update<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Display<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Insertion<WithStreamedUnaryMethod_Update<Service > > > > StreamedService;
};

}  // namespace marketAccess


#endif  // GRPC_proto_2fMarketAccess_2eproto__INCLUDED
