// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/MarketAccess.proto
#ifndef GRPC_proto_2fMarketAccess_2eproto__INCLUDED
#define GRPC_proto_2fMarketAccess_2eproto__INCLUDED

#include "proto/MarketAccess.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace marketAccess {

class Communication final {
 public:
  static constexpr char const* service_full_name() {
    return "marketAccess.Communication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::marketAccess::OrderBookContent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>> AsyncDisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>>(AsyncDisplayRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>> PrepareAsyncDisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>>(PrepareAsyncDisplayRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::marketAccess::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>> AsyncDeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>>(AsyncDeleteRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>> PrepareAsyncDeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>>(PrepareAsyncDeleteRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status InsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::marketAccess::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>> AsyncInsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>>(AsyncInsertionRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>> PrepareAsyncInsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>>(PrepareAsyncInsertionRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::marketAccess::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>> AsyncUpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>>(AsyncUpdateRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>> PrepareAsyncUpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>>(PrepareAsyncUpdateRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void DisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>* AsyncDisplayRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::OrderBookContent>* PrepareAsyncDisplayRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>* AsyncDeleteRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>* PrepareAsyncDeleteRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>* AsyncInsertionRequestRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>* PrepareAsyncInsertionRequestRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>* AsyncUpdateRequestRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketAccess::Confirmation>* PrepareAsyncUpdateRequestRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::marketAccess::OrderBookContent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>> AsyncDisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>>(AsyncDisplayRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>> PrepareAsyncDisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>>(PrepareAsyncDisplayRequestRaw(context, request, cq));
    }
    ::grpc::Status DeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::marketAccess::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>> AsyncDeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>>(AsyncDeleteRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>> PrepareAsyncDeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>>(PrepareAsyncDeleteRequestRaw(context, request, cq));
    }
    ::grpc::Status InsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::marketAccess::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>> AsyncInsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>>(AsyncInsertionRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>> PrepareAsyncInsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>>(PrepareAsyncInsertionRequestRaw(context, request, cq));
    }
    ::grpc::Status UpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::marketAccess::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>> AsyncUpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>>(AsyncUpdateRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>> PrepareAsyncUpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>>(PrepareAsyncUpdateRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, std::function<void(::grpc::Status)>) override;
      void DisplayRequest(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void DeleteRequest(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void InsertionRequest(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void UpdateRequest(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>* AsyncDisplayRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::OrderBookContent>* PrepareAsyncDisplayRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DisplayParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>* AsyncDeleteRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>* PrepareAsyncDeleteRequestRaw(::grpc::ClientContext* context, const ::marketAccess::DeletionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>* AsyncInsertionRequestRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>* PrepareAsyncInsertionRequestRaw(::grpc::ClientContext* context, const ::marketAccess::InsertionParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>* AsyncUpdateRequestRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketAccess::Confirmation>* PrepareAsyncUpdateRequestRaw(::grpc::ClientContext* context, const ::marketAccess::UpdateParameters& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DisplayRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertionRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DisplayRequest(::grpc::ServerContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response);
    virtual ::grpc::Status DeleteRequest(::grpc::ServerContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::Confirmation* response);
    virtual ::grpc::Status InsertionRequest(::grpc::ServerContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::Confirmation* response);
    virtual ::grpc::Status UpdateRequest(::grpc::ServerContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::Confirmation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DisplayRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DisplayRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DisplayRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisplayRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisplayRequest(::grpc::ServerContext* context, ::marketAccess::DisplayParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::OrderBookContent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRequest(::grpc::ServerContext* context, ::marketAccess::DeletionParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertionRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InsertionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertionRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertionRequest(::grpc::ServerContext* context, ::marketAccess::InsertionParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRequest() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRequest(::grpc::ServerContext* context, ::marketAccess::UpdateParameters* request, ::grpc::ServerAsyncResponseWriter< ::marketAccess::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DisplayRequest<WithAsyncMethod_DeleteRequest<WithAsyncMethod_InsertionRequest<WithAsyncMethod_UpdateRequest<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DisplayRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DisplayRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::DisplayParameters* request, ::marketAccess::OrderBookContent* response) { return this->DisplayRequest(context, request, response); }));}
    void SetMessageAllocatorFor_DisplayRequest(
        ::grpc::MessageAllocator< ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DisplayRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisplayRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DisplayRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::DeletionParameters, ::marketAccess::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::DeletionParameters* request, ::marketAccess::Confirmation* response) { return this->DeleteRequest(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRequest(
        ::grpc::MessageAllocator< ::marketAccess::DeletionParameters, ::marketAccess::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::DeletionParameters, ::marketAccess::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsertionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertionRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::InsertionParameters, ::marketAccess::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::InsertionParameters* request, ::marketAccess::Confirmation* response) { return this->InsertionRequest(context, request, response); }));}
    void SetMessageAllocatorFor_InsertionRequest(
        ::grpc::MessageAllocator< ::marketAccess::InsertionParameters, ::marketAccess::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::InsertionParameters, ::marketAccess::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertionRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertionRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRequest() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::marketAccess::UpdateParameters, ::marketAccess::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketAccess::UpdateParameters* request, ::marketAccess::Confirmation* response) { return this->UpdateRequest(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRequest(
        ::grpc::MessageAllocator< ::marketAccess::UpdateParameters, ::marketAccess::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketAccess::UpdateParameters, ::marketAccess::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DisplayRequest<WithCallbackMethod_DeleteRequest<WithCallbackMethod_InsertionRequest<WithCallbackMethod_UpdateRequest<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DisplayRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DisplayRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DisplayRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisplayRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertionRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InsertionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertionRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRequest() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DisplayRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DisplayRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DisplayRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisplayRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisplayRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertionRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InsertionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertionRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertionRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRequest() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DisplayRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DisplayRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DisplayRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_DisplayRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisplayRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DisplayRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertionRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertionRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertionRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertionRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRequest() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DisplayRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DisplayRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::DisplayParameters, ::marketAccess::OrderBookContent>* streamer) {
                       return this->StreamedDisplayRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DisplayRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DisplayRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DisplayParameters* /*request*/, ::marketAccess::OrderBookContent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisplayRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::DisplayParameters,::marketAccess::OrderBookContent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::DeletionParameters, ::marketAccess::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::DeletionParameters, ::marketAccess::Confirmation>* streamer) {
                       return this->StreamedDeleteRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::DeletionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::DeletionParameters,::marketAccess::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertionRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::InsertionParameters, ::marketAccess::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::InsertionParameters, ::marketAccess::Confirmation>* streamer) {
                       return this->StreamedInsertionRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertionRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::InsertionParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertionRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::InsertionParameters,::marketAccess::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRequest() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketAccess::UpdateParameters, ::marketAccess::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketAccess::UpdateParameters, ::marketAccess::Confirmation>* streamer) {
                       return this->StreamedUpdateRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRequest(::grpc::ServerContext* /*context*/, const ::marketAccess::UpdateParameters* /*request*/, ::marketAccess::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketAccess::UpdateParameters,::marketAccess::Confirmation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DisplayRequest<WithStreamedUnaryMethod_DeleteRequest<WithStreamedUnaryMethod_InsertionRequest<WithStreamedUnaryMethod_UpdateRequest<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DisplayRequest<WithStreamedUnaryMethod_DeleteRequest<WithStreamedUnaryMethod_InsertionRequest<WithStreamedUnaryMethod_UpdateRequest<Service > > > > StreamedService;
};

}  // namespace marketAccess


#endif  // GRPC_proto_2fMarketAccess_2eproto__INCLUDED
